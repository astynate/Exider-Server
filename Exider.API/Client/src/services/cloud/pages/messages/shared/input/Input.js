import React, { useState, useEffect } from 'react';
import styles from './main.module.css';

const Input = ({sendMessage}) => {
    const [text, setText] = useState('');
    const textAreaRef = React.createRef();

    useEffect(() => {
        textAreaRef.current.style.height = 'inherit';
        const scrollHeight = textAreaRef.current.scrollHeight;
        textAreaRef.current.style.height = scrollHeight + 'px';
    }, [text]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (textAreaRef.current && !textAreaRef.current.contains(event.target)) {
                textAreaRef.current.focus();
            }
        };

        document.addEventListener('click', handleClickOutside);
        
        return () => {
            document.removeEventListener('click', handleClickOutside);
        };
    }, []);

    useEffect(() => {
        textAreaRef.current.style.height = 'inherit';
        const scrollHeight = textAreaRef.current.scrollHeight;
        textAreaRef.current.style.height = scrollHeight + 'px';
    }, [text]);

    const handleChange = (event) => {
        setText(event.target.value);
        // props.message[1](event.target.value);
    };

    const handleKeyDown = (event) => {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessageAsync();
      }
    };
  
    const sendMessageAsync = async () => {
        await sendMessage(text);
        setText('');
    };

    return (
        <div className={styles.wrapper}>
            {/* {props.isSendingPossible[0] === false ? 
                <StopGeneration 
                    isStop={props.isSendingPossible} 
                    onClick={props.cancel}
                /> : null
            } */}
            <div className={styles.inputWrapper}>
                <textarea 
                    placeholder='Write a message...' 
                    className={styles.input}
                    ref={textAreaRef}
                    rows={1}
                    value={text}
                    onChange={handleChange}
                    onKeyDown={handleKeyDown}
                    maxLength={4000}
                    autoFocus
                />
            </div>
            {/* <span>Cyraâ€™s answers are generated by AI. Please check the information!</span> */}
        </div>
    );
};

export default Input;